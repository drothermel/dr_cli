[project]
name = "dr-cli"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "Danielle Rothermel", email = "danielle.rothermel@gmail.com" }
]
requires-python = ">=3.12"
dependencies = [
    "pydantic>=2.11.7",
    "mypy>=1.16.0",
]

[project.scripts]
dr-typecheck = "dr_cli.typecheck.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "mypy>=1.16.0",
    "ruff>=0.11.13",
    "tomlkit>=0.12.0",
]
test = [
    "pytest>=8.4.0",
    "pytest-cov>=4.0",      # Coverage reports
    "pytest-xdist>=3.0",    # Parallel execution
    "pytest-timeout>=2.0",  # Timeout long-running tests
    "pytest-mock>=3.0",     # Better mocking
    "pytest-benchmark>=4.0", # Performance benchmarking
]
test-ml = [
    "pytest-pytorch>=0.2",   # PyTorch test utilities
    "pytest-randomly>=3.0",  # Randomize test order
]

all = [
    {include-group = "dev"},
    {include-group = "test"},
]

[tool.ruff]
line-length = 88
cache-dir = ".ruff_cache"
include = ["src/**/*.py", "scripts/**/*.py", "tests/**/*.py"]
exclude = ["outputs/*", "notebooks/*"]

[tool.ruff.format]
indent-style = "space"
quote-style = "double"
docstring-code-format = true
docstring-code-line-length = 72

[tool.ruff.lint]
extend-select = [
    # Use for precommit hooks
    "A",                    # Variable and argument shadowing
    "B", "FBT003",          # bugbear criticals
    "C4", "C90",            # perf / complexity
    "F821",                 # undefined name
    "INP",                  # missing __init__.py
    "N999",                 # pep8 avoid invalid module naming
    "NPY", "PD",            # data-science-specific
    "PERF",                 # unnecessary casts, bad iteration patterns
    "PIE",                  # duplicate class field defs, etc
    "PLE",                  # pylint errors
    "PLW",                  # pylint warning
    "PLR",                  # safe comparisons
    "PT",                   # pytest
    "PTH",                  # use pathlib not os.path
    "RUF",                  # ruff internals
    "S",                    # security
    "SLF",                  # private member accessed outside class
    "SIM",                  # simplify code
    "T10",                  # no pdb in code
    "TID",                  # tidy imports
    "UP",                   # upgrades
    "YTT",                  # correct comparisons to sys version

    # Use the rest of the time
    "ARG",                  # argumetns
    "ANN",                  # api clarity
    "COM",                  # training comma enforcement
    "D",                    # docstring styling
    "E",                    # indentation and spaceing
    "F",                    # unused import or local variable
    "FA",                   # future annotations
    "FLY",                  # fstrings instead of string joins
    "ICN",                  # specific import names
    "W",                    # space normalization
]
ignore = [
    "ARG001",               # callbacks
    "COM812", "ISC001",     # Overlap with each other in formatting
    "EXE",                  # Files generally don't need to be executable
    "FBT001", "FBT002",     # bool kwargs common
    "I",                    # sort imports: covered by ruff format
    "ICN002", "ICN003",     # import rules that are overly restrictive
    "INT",                  # Gettext rules, unused
    "ISC",                  # String concat rules, strict
    "LOG",                  # logger usage, strict
    "PLR0913",              # Too many args, rough with ML code
    "S101",                 # asserts for invariants
    "TD",                   # TODOs are fine
]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = [
    "D",
]
"tests/**/*.py" = [
    "ARG",                  # unused arguments in fixtures
    "PLR2004",              # Magic values are OK in tests
]
"**/scripts/**/*.py" = [
    "T201",                 # print() is fine in scripts
    "D101", "D102", "D103", # don't require docstrings
]
"*_notebook.py" = [
    "E402",                 # Import order OK in notebooks
    "F401",                 # Unused imports OK in notebooks
]  

[tool.ruff.lint.mccabe]
max-complexity = 15         # Higher threshold for ML

[tool.ruff.lint.pydocstyle]
convention = "google"       # Accepts: "google", "numpy", or "pep257".
ignore-decorators = ["typing.overload", "typing.override"]

[tool.ruff.lint.pylint]
max-args            = 8     # allow up to 8 params before PLR0913 fires
max-branches        = 20    # PLR0912
max-statements      = 80    # PLR0915
max-nested-blocks   = 8     # PLR1702
max-returns         = 10    # PLR0911

[tool.ruff.lint.flake8-import-conventions.aliases]
numpy               = "np"
"numpy.typing"      = "npt"
pandas              = "pd"
"matplotlib.pyplot" = "plt"
seaborn             = "sns"
"dask.dataframe"    = "dd"
polars              = "pl"
lightning			= "L"
"jax.numpy" 	    = "jnp"

[tool.mypy]
strict = true
check_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
no_implicit_reexport = true
strict_equality = true
explicit_package_bases = true
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

# Ignore missing imports for libraries without type stubs
ignore_missing_imports = true

# Performance
cache_dir = ".mypy_cache"
show_error_codes = true


[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Logging (disabled by default for clean test output)
# Enable with: pytest --log-cli-level=INFO
log_cli = false
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Warnings
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

addopts = [
    "--strict-config",
    "--strict-markers",
    "--verbose",
    "-ra",  # show all test outcome reasons
    "-n", "auto",
]

# Fail on unregistered markers
markers = [
    "slow: marks tests as slow",
    "serial: marks tests that must run serially",
    "integration: marks integration tests",
]

[tool.coverage.report]
exclude_lines = [
    # Standard exclusions
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@profile",  # Line profiler decorators
    "if _debug:",  # Debug-only code
    "if _profile:",  # Profiling-only code

    # ML-specific exclusions
    "if torch.cuda.is_available()",  # GPU-specific code
    "@torch.no_grad()",  # Inference-only code
    "if __name__ == .__main__.:",  # Script entry points
    "def visualize",  # Visualization/debugging functions
    "except KeyboardInterrupt:",  # User interruption handlers
    "@torch.jit.script",  # JIT compiled code
    "@torch.jit.export",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "scripts/*",  # Standalone scripts
    "notebooks/*",  # Jupyter notebooks
    "*/__init__.py",  # Empty init files
    "*/config.py",  # Configuration files
]
